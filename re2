
# AWS-Powered Scalable WordPress Deployment in Retail

This repository demonstrates a full-scale, cost-optimized, and highly available WordPress deployment on AWS, aimed at showcasing how cloud infrastructure can transform the retail industry. The project explores AWS services such as EC2, Auto Scaling Groups, CloudWatch, Load Balancing, and RDS to implement a robust and scalable solution.

## 📌 Project Objectives

- Deploy WordPress using Amazon EC2 and Auto Scaling for dynamic scaling
- Use Amazon RDS and EFS for consistent database and media access across instances
- Optimize system performance, security, availability, and cost
- Conduct stress/load testing with 250–500 clients
- Ensure GDPR and compliance standards

## 🚀 Architecture Highlights

### ✅ Initial WordPress Setup
- Deployed on a single EC2 instance using Bitnami AMI
- Pros: Low cost, ease of use
- Cons: No scalability, single point of failure

### 🔁 Auto Scaling and Load Balancing
- Auto Scaling Group with step and simple scaling policies
- Metrics used:
  - Scale Out: TargetResponseTime (≥ 100ms)
  - Scale In: RequestCountPerTarget (≤ 5 requests over 15 minutes)
- Application Load Balancer (ALB) ensures traffic distribution
- Lifecycle hooks and warm pools discussed

### 📊 Load Testing Results

| Instance Type | 250 Clients | 350 Clients | 500 Clients |
|---------------|-------------|-------------|-------------|
| t1.micro      | 494ms       | 580ms       | 786ms       |
| medium        | 389ms       | 457ms       | 667ms       |
| large         | 324ms       | 409ms       | 602ms       |

### 🔐 Security Implementations
- IAM roles with least privileges and MFA
- Network ACLs, security groups, AWS WAF
- Secrets Manager, encrypted volumes and SSL/TLS
- DDoS protection via AWS Shield

### 💡 Cost Optimisation
- Instance right-sizing, lifecycle policies on S3
- EBS and EFS cost control
- AWS Budgets, Cost Explorer, Trusted Advisor
- Serverless experimentation with Lambda

## 🛠 Technologies Used

- **Compute**: EC2, Auto Scaling Groups
- **Database**: Amazon RDS (Multi-AZ)
- **Storage**: EFS, S3
- **Monitoring**: CloudWatch, CloudTrail
- **Security**: IAM, WAF, KMS, Shield
- **Load Testing**: Loader.io

## 📎 References

- [AWS Academy Cloud Foundations](https://awsacademy.instructure.com/courses/56499)
- [Amazon CloudFront](https://aws.amazon.com/cloudfront/)
- [AWS Shield Features](https://aws.amazon.com/shield/features/)
- [Encrypting EC2 Data](https://reintech.io/blog/encrypting-data-ec2-instances-aws-kms)
- See full bibliography in `AWS.pdf`

## 📂 File Structure

```
.
├── README.md
├── AWS.pdf
├── architecture_images/
│   ├── scaling_policy.png
│   ├── load_balancer.png
│   ├── cloudwatch_metrics.png
│   ├── result_500_clients.png
│   ├── result_350_clients.png
│   ├── result_250_clients.png
```

## 📬 Contact

**Created by:** Uchit Bhadauriya  
**Institution:** University of Bristol  
**Email:** ir23063@bristol.ac.uk

⭐ Star this repo if it helped you. Feel free to fork or raise an issue to discuss improvements.
